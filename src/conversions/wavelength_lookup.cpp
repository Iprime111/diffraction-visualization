#include <unordered_map>

#include "conversions/wavelength_lookup.hpp"
#include "core/attributes.hpp"
#include "fmt/base.h"

namespace {
const diffraction::XYZData& getXYZData(double wavelength);
diffraction::RGBData xyzToRgbLinear(const diffraction::XYZData& data);
diffraction::RGBData rgbLinearToRgb(const diffraction::RGBData& data);
double rgbLinearComponentToRgb(double component);

// TODO compute in runtime with respect to actual table?
constexpr auto kLookupWavelengthCount = 400;
constexpr auto kLookupWavelengthStep = (779.0 - 380.0) / kLookupWavelengthCount;
} // namespace

namespace diffraction {
const RGBData wavelengthToRgb(double wavelength, double intensity) {
    return rgbLinearToRgb(xyzToRgbLinear(wavelengthToXyz(wavelength, intensity)));
}

const XYZData wavelengthToXyz(double wavelength, double intensity) {
    XYZData lookupData = getXYZData(wavelength);

    // Magic constant for CIE conversion
    constexpr auto kMagicConstant = 0.003975 * 683.002;
    
    auto multiplier =  kMagicConstant * intensity * kLookupWavelengthStep;

    lookupData.x *= multiplier;
    lookupData.y *= multiplier;
    lookupData.z *= multiplier;

    return lookupData;
}

void RgbNormTransform::transform(std::vector<RGBData>& data) const {
    auto maxValue = 0.0;

    for (const auto& rgb : data) {
        maxValue = std::max(maxValue, rgb.r);
        maxValue = std::max(maxValue, rgb.g);
        maxValue = std::max(maxValue, rgb.b);
    }

    if (maxValue <= cutoff_) {
        return;
    }

    auto multiplier = cutoff_ / maxValue;

    for (auto& rgb : data) {
        rgb.r *= multiplier;
        rgb.g *= multiplier;
        rgb.b *= multiplier;
    }
}
} // namespace diffraction

namespace {
diffraction::RGBData xyzToRgbLinear(const diffraction::XYZData& data) {
    // https://rafael-fuente.github.io/simulating-diffraction-patterns-with-the-angular-spectrum-method-and-python.html#mjx-eqn%3Aeq%3A1
    constexpr double conversionTensor[3][3] {
        {3.2406, -1.5372, -0.4986},
        {-0.9689, 1.8758, 0.0415},
        {0.0557, -0.2040, 1.0570},
    };
    
    diffraction::RGBData result;

    result.r = data.x * conversionTensor[0][0] + data.y * conversionTensor[0][1] + data.z * conversionTensor[0][2];
    result.g = data.x * conversionTensor[1][0] + data.y * conversionTensor[1][1] + data.z * conversionTensor[1][2];
    result.b = data.x * conversionTensor[2][0] + data.y * conversionTensor[2][1] + data.z * conversionTensor[2][2];

    result.r = std::max(result.r, 0.0);
    result.g = std::max(result.g, 0.0);
    result.b = std::max(result.b, 0.0);

    return result;
}

diffraction::RGBData rgbLinearToRgb(const diffraction::RGBData& data) {
    diffraction::RGBData result{data};

    result.r = rgbLinearComponentToRgb(result.r);
    result.g = rgbLinearComponentToRgb(result.g);
    result.b = rgbLinearComponentToRgb(result.b);

    return result;
}

double rgbLinearComponentToRgb(double component) {
    double result{0};

    constexpr auto kThresholdValue = 0.00304;

    if (component <= kThresholdValue) {
        constexpr auto kMagicMultiplier = 12.92;
        return component * kMagicMultiplier;
    }

    constexpr auto kMagicMultiplier = 1.055;
    constexpr auto kMagicPower = 0.42;
    constexpr auto kMagicShift = -0.055;

    return kMagicMultiplier * std::pow(component, kMagicPower) + kMagicShift;
}

const std::unordered_map<int, diffraction::XYZData> wavelengthLookupTable {
    {380, {0.0014, 0.0000, 0.0065}},
    {381, {0.0015, 0.0000, 0.0070}},
    {382, {0.0016, 0.0001, 0.0077}},
    {383, {0.0018, 0.0001, 0.0084}},
    {384, {0.0020, 0.0001, 0.0093}},
    {385, {0.0022, 0.0001, 0.0105}},
    {386, {0.0025, 0.0001, 0.0120}},
    {387, {0.0029, 0.0001, 0.0137}},
    {388, {0.0033, 0.0001, 0.0157}},
    {389, {0.0037, 0.0001, 0.0179}},
    {390, {0.0042, 0.0001, 0.0201}},
    {391, {0.0047, 0.0001, 0.0224}},
    {392, {0.0052, 0.0001, 0.0250}},
    {393, {0.0059, 0.0001, 0.0281}},
    {394, {0.0067, 0.0002, 0.0317}},
    {395, {0.0076, 0.0002, 0.0362}},
    {396, {0.0087, 0.0002, 0.0416}},
    {397, {0.0100, 0.0003, 0.0477}},
    {398, {0.0114, 0.0003, 0.0543}},
    {399, {0.0129, 0.0004, 0.0611}},
    {400, {0.0143, 0.0004, 0.0679}},
    {401, {0.0157, 0.0004, 0.0745}},
    {402, {0.0171, 0.0005, 0.0814}},
    {403, {0.0188, 0.0005, 0.0892}},
    {404, {0.0208, 0.0005, 0.0986}},
    {405, {0.0232, 0.0006, 0.1102}},
    {406, {0.0262, 0.0007, 0.1245}},
    {407, {0.0297, 0.0008, 0.1415}},
    {408, {0.0338, 0.0009, 0.1610}},
    {409, {0.0384, 0.0010, 0.1830}},
    {410, {0.0435, 0.0012, 0.2074}},
    {411, {0.0491, 0.0014, 0.2341}},
    {412, {0.0551, 0.0015, 0.2633}},
    {413, {0.0619, 0.0017, 0.2957}},
    {414, {0.0693, 0.0020, 0.3315}},
    {415, {0.0776, 0.0022, 0.3713}},
    {416, {0.0868, 0.0025, 0.4154}},
    {417, {0.0969, 0.0028, 0.4644}},
    {418, {0.1082, 0.0031, 0.5187}},
    {419, {0.1207, 0.0035, 0.5790}},
    {420, {0.1344, 0.0040, 0.6456}},
    {421, {0.1494, 0.0045, 0.7187}},
    {422, {0.1654, 0.0052, 0.7967}},
    {423, {0.1819, 0.0058, 0.8775}},
    {424, {0.1985, 0.0065, 0.9590}},
    {425, {0.2148, 0.0073, 1.0391}},
    {426, {0.2304, 0.0081, 1.1161}},
    {427, {0.2451, 0.0089, 1.1895}},
    {428, {0.2590, 0.0098, 1.2590}},
    {429, {0.2719, 0.0107, 1.3244}},
    {430, {0.2839, 0.0116, 1.3856}},
    {431, {0.2949, 0.0126, 1.4423}},
    {432, {0.3048, 0.0136, 1.4944}},
    {433, {0.3137, 0.0146, 1.5420}},
    {434, {0.3216, 0.0157, 1.5848}},
    {435, {0.3285, 0.0168, 1.6230}},
    {436, {0.3344, 0.0180, 1.6565}},
    {437, {0.3392, 0.0192, 1.6854}},
    {438, {0.3431, 0.0204, 1.7100}},
    {439, {0.3462, 0.0217, 1.7305}},
    {440, {0.3483, 0.0230, 1.7471}},
    {441, {0.3496, 0.0243, 1.7601}},
    {442, {0.3502, 0.0256, 1.7697}},
    {443, {0.3501, 0.0270, 1.7765}},
    {444, {0.3494, 0.0284, 1.7806}},
    {445, {0.3481, 0.0298, 1.7826}},
    {446, {0.3464, 0.0313, 1.7827}},
    {447, {0.3442, 0.0329, 1.7814}},
    {448, {0.3418, 0.0345, 1.7789}},
    {449, {0.3391, 0.0362, 1.7757}},
    {450, {0.3362, 0.0380, 1.7721}},
    {451, {0.3332, 0.0398, 1.7684}},
    {452, {0.3301, 0.0418, 1.7642}},
    {453, {0.3267, 0.0438, 1.7590}},
    {454, {0.3229, 0.0458, 1.7525}},
    {455, {0.3187, 0.0480, 1.7441}},
    {456, {0.3140, 0.0502, 1.7335}},
    {457, {0.3088, 0.0526, 1.7206}},
    {458, {0.3032, 0.0550, 1.7055}},
    {459, {0.2972, 0.0575, 1.6884}},
    {460, {0.2908, 0.0600, 1.6692}},
    {461, {0.2840, 0.0626, 1.6479}},
    {462, {0.2768, 0.0653, 1.6239}},
    {463, {0.2690, 0.0680, 1.5964}},
    {464, {0.2605, 0.0709, 1.5648}},
    {465, {0.2511, 0.0739, 1.5281}},
    {466, {0.2408, 0.0770, 1.4861}},
    {467, {0.2299, 0.0803, 1.4396}},
    {468, {0.2185, 0.0837, 1.3902}},
    {469, {0.2069, 0.0873, 1.3391}},
    {470, {0.1954, 0.0910, 1.2876}},
    {471, {0.1842, 0.0949, 1.2369}},
    {472, {0.1732, 0.0990, 1.1871}},
    {473, {0.1626, 0.1034, 1.1381}},
    {474, {0.1522, 0.1079, 1.0897}},
    {475, {0.1421, 0.1126, 1.0419}},
    {476, {0.1322, 0.1175, 0.9946}},
    {477, {0.1226, 0.1227, 0.9478}},
    {478, {0.1133, 0.1280, 0.9019}},
    {479, {0.1043, 0.1334, 0.8569}},
    {480, {0.0956, 0.1390, 0.8130}},
    {481, {0.0872, 0.1447, 0.7704}},
    {482, {0.0793, 0.1505, 0.7293}},
    {483, {0.0717, 0.1565, 0.6898}},
    {484, {0.0646, 0.1627, 0.6521}},
    {485, {0.0580, 0.1693, 0.6162}},
    {486, {0.0519, 0.1762, 0.5823}},
    {487, {0.0463, 0.1835, 0.5504}},
    {488, {0.0412, 0.1912, 0.5203}},
    {489, {0.0364, 0.1994, 0.4919}},
    {490, {0.0320, 0.2080, 0.4652}},
    {491, {0.0279, 0.2171, 0.4400}},
    {492, {0.0242, 0.2268, 0.4163}},
    {493, {0.0207, 0.2369, 0.3940}},
    {494, {0.0175, 0.2475, 0.3730}},
    {495, {0.0147, 0.2586, 0.3533}},
    {496, {0.0122, 0.2701, 0.3348}},
    {497, {0.0099, 0.2822, 0.3175}},
    {498, {0.0080, 0.2950, 0.3012}},
    {499, {0.0063, 0.3086, 0.2861}},
    {500, {0.0049, 0.3230, 0.2720}},
    {501, {0.0038, 0.3384, 0.2589}},
    {502, {0.0030, 0.3547, 0.2465}},
    {503, {0.0024, 0.3717, 0.2348}},
    {504, {0.0022, 0.3893, 0.2234}},
    {505, {0.0024, 0.4073, 0.2123}},
    {506, {0.0029, 0.4257, 0.2012}},
    {507, {0.0038, 0.4444, 0.1902}},
    {508, {0.0052, 0.4635, 0.1793}},
    {509, {0.0070, 0.4830, 0.1686}},
    {510, {0.0093, 0.5030, 0.1582}},
    {511, {0.0121, 0.5235, 0.1481}},
    {512, {0.0155, 0.5444, 0.1383}},
    {513, {0.0195, 0.5655, 0.1290}},
    {514, {0.0240, 0.5869, 0.1201}},
    {515, {0.0291, 0.6082, 0.1117}},
    {516, {0.0348, 0.6295, 0.1039}},
    {517, {0.0411, 0.6504, 0.0966}},
    {518, {0.0480, 0.6710, 0.0899}},
    {519, {0.0554, 0.6909, 0.0838}},
    {520, {0.0633, 0.7100, 0.0782}},
    {521, {0.0717, 0.7282, 0.0732}},
    {522, {0.0805, 0.7455, 0.0687}},
    {523, {0.0897, 0.7620, 0.0646}},
    {524, {0.0994, 0.7779, 0.0608}},
    {525, {0.1096, 0.7932, 0.0573}},
    {526, {0.1202, 0.8081, 0.0540}},
    {527, {0.1311, 0.8224, 0.0508}},
    {528, {0.1424, 0.8362, 0.0478}},
    {529, {0.1539, 0.8494, 0.0450}},
    {530, {0.1655, 0.8620, 0.0422}},
    {531, {0.1773, 0.8739, 0.0395}},
    {532, {0.1891, 0.8850, 0.0369}},
    {533, {0.2012, 0.8956, 0.0344}},
    {534, {0.2133, 0.9055, 0.0321}},
    {535, {0.2257, 0.9149, 0.0298}},
    {536, {0.2383, 0.9238, 0.0277}},
    {537, {0.2510, 0.9321, 0.0257}},
    {538, {0.2639, 0.9399, 0.0238}},
    {539, {0.2771, 0.9472, 0.0220}},
    {540, {0.2904, 0.9540, 0.0203}},
    {541, {0.3039, 0.9603, 0.0187}},
    {542, {0.3176, 0.9660, 0.0173}},
    {543, {0.3315, 0.9713, 0.0159}},
    {544, {0.3455, 0.9760, 0.0146}},
    {545, {0.3597, 0.9803, 0.0134}},
    {546, {0.3741, 0.9841, 0.0123}},
    {547, {0.3886, 0.9875, 0.0113}},
    {548, {0.4033, 0.9904, 0.0103}},
    {549, {0.4183, 0.9929, 0.0095}},
    {550, {0.4334, 0.9950, 0.0087}},
    {551, {0.4488, 0.9967, 0.0080}},
    {552, {0.4643, 0.9981, 0.0073}},
    {553, {0.4801, 0.9991, 0.0067}},
    {554, {0.4960, 0.9998, 0.0062}},
    {555, {0.5121, 1.0000, 0.0057}},
    {556, {0.5284, 0.9999, 0.0053}},
    {557, {0.5447, 0.9993, 0.0049}},
    {558, {0.5612, 0.9983, 0.0045}},
    {559, {0.5778, 0.9969, 0.0042}},
    {560, {0.5945, 0.9950, 0.0039}},
    {561, {0.6112, 0.9926, 0.0036}},
    {562, {0.6280, 0.9898, 0.0034}},
    {563, {0.6448, 0.9865, 0.0031}},
    {564, {0.6616, 0.9827, 0.0029}},
    {565, {0.6784, 0.9786, 0.0027}},
    {566, {0.6952, 0.9741, 0.0025}},
    {567, {0.7121, 0.9692, 0.0024}},
    {568, {0.7288, 0.9639, 0.0023}},
    {569, {0.7455, 0.9581, 0.0022}},
    {570, {0.7621, 0.9520, 0.0021}},
    {571, {0.7785, 0.9455, 0.0020}},
    {572, {0.7948, 0.9385, 0.0019}},
    {573, {0.8109, 0.9312, 0.0019}},
    {574, {0.8268, 0.9235, 0.0018}},
    {575, {0.8425, 0.9154, 0.0018}},
    {576, {0.8579, 0.9070, 0.0018}},
    {577, {0.8731, 0.8983, 0.0018}},
    {578, {0.8879, 0.8892, 0.0017}},
    {579, {0.9023, 0.8798, 0.0017}},
    {580, {0.9163, 0.8700, 0.0017}},
    {581, {0.9298, 0.8599, 0.0017}},
    {582, {0.9428, 0.8494, 0.0016}},
    {583, {0.9553, 0.8386, 0.0015}},
    {584, {0.9673, 0.8276, 0.0015}},
    {585, {0.9786, 0.8163, 0.0014}},
    {586, {0.9893, 0.8048, 0.0013}},
    {587, {0.9995, 0.7931, 0.0013}},
    {588, {1.0090, 0.7812, 0.0012}},
    {589, {1.0180, 0.7691, 0.0011}},
    {590, {1.0263, 0.7570, 0.0011}},
    {591, {1.0340, 0.7448, 0.0011}},
    {592, {1.0410, 0.7324, 0.0011}},
    {593, {1.0472, 0.7200, 0.0010}},
    {594, {1.0525, 0.7075, 0.0010}},
    {595, {1.0567, 0.6949, 0.0010}},
    {596, {1.0598, 0.6822, 0.0010}},
    {597, {1.0618, 0.6695, 0.0009}},
    {598, {1.0628, 0.6567, 0.0009}},
    {599, {1.0629, 0.6438, 0.0008}},
    {600, {1.0622, 0.6310, 0.0008}},
    {601, {1.0607, 0.6182, 0.0008}},
    {602, {1.0584, 0.6053, 0.0007}},
    {603, {1.0552, 0.5925, 0.0007}},
    {604, {1.0510, 0.5796, 0.0006}},
    {605, {1.0456, 0.5668, 0.0006}},
    {606, {1.0391, 0.5540, 0.0005}},
    {607, {1.0314, 0.5411, 0.0005}},
    {608, {1.0227, 0.5284, 0.0004}},
    {609, {1.0131, 0.5156, 0.0004}},
    {610, {1.0026, 0.5030, 0.0003}},
    {611, {0.9913, 0.4905, 0.0003}},
    {612, {0.9792, 0.4780, 0.0002}},
    {613, {0.9664, 0.4656, 0.0002}},
    {614, {0.9528, 0.4534, 0.0002}},
    {615, {0.9384, 0.4412, 0.0002}},
    {616, {0.9232, 0.4291, 0.0002}},
    {617, {0.9073, 0.4171, 0.0002}},
    {618, {0.8905, 0.4050, 0.0002}},
    {619, {0.8729, 0.3930, 0.0002}},
    {620, {0.8544, 0.3810, 0.0002}},
    {621, {0.8351, 0.3689, 0.0002}},
    {622, {0.8150, 0.3569, 0.0002}},
    {623, {0.7943, 0.3448, 0.0001}},
    {624, {0.7730, 0.3329, 0.0001}},
    {625, {0.7514, 0.3210, 0.0001}},
    {626, {0.7295, 0.3093, 0.0001}},
    {627, {0.7075, 0.2978, 0.0001}},
    {628, {0.6855, 0.2866, 0.0000}},
    {629, {0.6638, 0.2756, 0.0000}},
    {630, {0.6424, 0.2650, 0.0000}},
    {631, {0.6215, 0.2548, 0.0000}},
    {632, {0.6011, 0.2449, 0.0000}},
    {633, {0.5811, 0.2353, 0.0000}},
    {634, {0.5613, 0.2260, 0.0000}},
    {635, {0.5419, 0.2170, 0.0000}},
    {636, {0.5227, 0.2082, 0.0000}},
    {637, {0.5036, 0.1996, 0.0000}},
    {638, {0.4848, 0.1912, 0.0000}},
    {639, {0.4662, 0.1830, 0.0000}},
    {640, {0.4479, 0.1750, 0.0000}},
    {641, {0.4298, 0.1672, 0.0000}},
    {642, {0.4121, 0.1596, 0.0000}},
    {643, {0.3946, 0.1523, 0.0000}},
    {644, {0.3775, 0.1451, 0.0000}},
    {645, {0.3608, 0.1382, 0.0000}},
    {646, {0.3444, 0.1315, 0.0000}},
    {647, {0.3285, 0.1250, 0.0000}},
    {648, {0.3130, 0.1188, 0.0000}},
    {649, {0.2980, 0.1128, 0.0000}},
    {650, {0.2835, 0.1070, 0.0000}},
    {651, {0.2695, 0.1015, 0.0000}},
    {652, {0.2561, 0.0962, 0.0000}},
    {653, {0.2432, 0.0911, 0.0000}},
    {654, {0.2307, 0.0863, 0.0000}},
    {655, {0.2187, 0.0816, 0.0000}},
    {656, {0.2071, 0.0771, 0.0000}},
    {657, {0.1959, 0.0728, 0.0000}},
    {658, {0.1852, 0.0687, 0.0000}},
    {659, {0.1748, 0.0648, 0.0000}},
    {660, {0.1649, 0.0610, 0.0000}},
    {661, {0.1554, 0.0574, 0.0000}},
    {662, {0.1462, 0.0540, 0.0000}},
    {663, {0.1375, 0.0507, 0.0000}},
    {664, {0.1292, 0.0476, 0.0000}},
    {665, {0.1212, 0.0446, 0.0000}},
    {666, {0.1136, 0.0418, 0.0000}},
    {667, {0.1065, 0.0391, 0.0000}},
    {668, {0.0997, 0.0366, 0.0000}},
    {669, {0.0933, 0.0342, 0.0000}},
    {670, {0.0874, 0.0320, 0.0000}},
    {671, {0.0819, 0.0300, 0.0000}},
    {672, {0.0768, 0.0281, 0.0000}},
    {673, {0.0720, 0.0263, 0.0000}},
    {674, {0.0677, 0.0247, 0.0000}},
    {675, {0.0636, 0.0232, 0.0000}},
    {676, {0.0598, 0.0218, 0.0000}},
    {677, {0.0563, 0.0205, 0.0000}},
    {678, {0.0530, 0.0193, 0.0000}},
    {679, {0.0499, 0.0181, 0.0000}},
    {680, {0.0468, 0.0170, 0.0000}},
    {681, {0.0438, 0.0159, 0.0000}},
    {682, {0.0409, 0.0148, 0.0000}},
    {683, {0.0381, 0.0138, 0.0000}},
    {684, {0.0354, 0.0128, 0.0000}},
    {685, {0.0329, 0.0119, 0.0000}},
    {686, {0.0305, 0.0110, 0.0000}},
    {687, {0.0284, 0.0102, 0.0000}},
    {688, {0.0263, 0.0095, 0.0000}},
    {689, {0.0244, 0.0088, 0.0000}},
    {690, {0.0227, 0.0082, 0.0000}},
    {691, {0.0211, 0.0076, 0.0000}},
    {692, {0.0196, 0.0071, 0.0000}},
    {693, {0.0182, 0.0066, 0.0000}},
    {694, {0.0169, 0.0061, 0.0000}},
    {695, {0.0158, 0.0057, 0.0000}},
    {696, {0.0148, 0.0053, 0.0000}},
    {697, {0.0138, 0.0050, 0.0000}},
    {698, {0.0130, 0.0047, 0.0000}},
    {699, {0.0122, 0.0044, 0.0000}},
    {700, {0.0114, 0.0041, 0.0000}},
    {701, {0.0107, 0.0038, 0.0000}},
    {702, {0.0100, 0.0036, 0.0000}},
    {703, {0.0093, 0.0033, 0.0000}},
    {704, {0.0087, 0.0031, 0.0000}},
    {705, {0.0081, 0.0029, 0.0000}},
    {706, {0.0076, 0.0027, 0.0000}},
    {707, {0.0071, 0.0025, 0.0000}},
    {708, {0.0066, 0.0024, 0.0000}},
    {709, {0.0062, 0.0022, 0.0000}},
    {710, {0.0058, 0.0021, 0.0000}},
    {711, {0.0054, 0.0020, 0.0000}},
    {712, {0.0051, 0.0018, 0.0000}},
    {713, {0.0047, 0.0017, 0.0000}},
    {714, {0.0044, 0.0016, 0.0000}},
    {715, {0.0041, 0.0015, 0.0000}},
    {716, {0.0038, 0.0014, 0.0000}},
    {717, {0.0036, 0.0013, 0.0000}},
    {718, {0.0033, 0.0012, 0.0000}},
    {719, {0.0031, 0.0011, 0.0000}},
    {720, {0.0029, 0.0010, 0.0000}},
    {721, {0.0027, 0.0009, 0.0000}},
    {722, {0.0025, 0.0009, 0.0000}},
    {723, {0.0023, 0.0008, 0.0000}},
    {724, {0.0022, 0.0007, 0.0000}},
    {725, {0.0020, 0.0007, 0.0000}},
    {726, {0.0019, 0.0007, 0.0000}},
    {727, {0.0017, 0.0006, 0.0000}},
    {728, {0.0016, 0.0006, 0.0000}},
    {729, {0.0015, 0.0005, 0.0000}},
    {730, {0.0014, 0.0005, 0.0000}},
    {731, {0.0013, 0.0005, 0.0000}},
    {732, {0.0012, 0.0005, 0.0000}},
    {733, {0.0011, 0.0004, 0.0000}},
    {734, {0.0011, 0.0004, 0.0000}},
    {735, {0.0010, 0.0004, 0.0000}},
    {736, {0.0009, 0.0004, 0.0000}},
    {737, {0.0009, 0.0003, 0.0000}},
    {738, {0.0008, 0.0003, 0.0000}},
    {739, {0.0008, 0.0002, 0.0000}},
    {740, {0.0007, 0.0002, 0.0000}},
    {741, {0.0007, 0.0002, 0.0000}},
    {742, {0.0006, 0.0002, 0.0000}},
    {743, {0.0006, 0.0002, 0.0000}},
    {744, {0.0005, 0.0002, 0.0000}},
    {745, {0.0005, 0.0002, 0.0000}},
    {746, {0.0005, 0.0002, 0.0000}},
    {747, {0.0004, 0.0002, 0.0000}},
    {748, {0.0004, 0.0001, 0.0000}},
    {749, {0.0003, 0.0001, 0.0000}},
    {750, {0.0003, 0.0001, 0.0000}},
    {751, {0.0003, 0.0001, 0.0000}},
    {752, {0.0002, 0.0001, 0.0000}},
    {753, {0.0002, 0.0001, 0.0000}},
    {754, {0.0002, 0.0001, 0.0000}},
    {755, {0.0002, 0.0001, 0.0000}},
    {756, {0.0002, 0.0001, 0.0000}},
    {757, {0.0002, 0.0001, 0.0000}},
    {758, {0.0002, 0.0001, 0.0000}},
    {759, {0.0002, 0.0001, 0.0000}},
    {760, {0.0002, 0.0001, 0.0000}},
    {761, {0.0002, 0.0001, 0.0000}},
    {762, {0.0002, 0.0001, 0.0000}},
    {763, {0.0001, 0.0000, 0.0000}},
    {764, {0.0001, 0.0000, 0.0000}},
    {765, {0.0001, 0.0000, 0.0000}},
    {766, {0.0001, 0.0000, 0.0000}},
    {767, {0.0001, 0.0000, 0.0000}},
    {768, {0.0001, 0.0000, 0.0000}},
    {769, {0.0001, 0.0000, 0.0000}},
    {770, {0.0001, 0.0000, 0.0000}},
    {771, {0.0001, 0.0000, 0.0000}},
    {772, {0.0001, 0.0000, 0.0000}},
    {773, {0.0001, 0.0000, 0.0000}},
    {774, {0.0001, 0.0000, 0.0000}},
    {775, {0.0001, 0.0000, 0.0000}},
    {776, {0.0001, 0.0000, 0.0000}},
    {777, {0.0001, 0.0000, 0.0000}},
    {778, {0.0000, 0.0000, 0.0000}},
    {779, {0.0000, 0.0000, 0.0000}},
};

const diffraction::XYZData& getXYZData(double wavelength) {
    auto result = wavelengthLookupTable.find(std::round(wavelength));

    if (result == wavelengthLookupTable.end()) {
        DIFFRACTION_CRITICAL("Unable to get XYZ data for {} nm", wavelength);
    }

    return result->second;
} 
} // namespace

